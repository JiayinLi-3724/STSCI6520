install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
alpha1=1
alpha2=2
alpha3=3
n <- 100
A1 <- diag(alpha1, n)
dim(A1)
cores==NULL
cores=5
cores==NULL
is.null(cores)
cores=NULL
is.null(cores)
?ginv
??ginv
??makeCluster
??registerDoParallel
??%dopar%
foreach::%dopar%
??stopCluster
parallel::stopCluster
parallel::stopCluster()
foreach::foreach(j=1:cores, .combine = cbind,.multicombine = TRUE) %dopar%{
begin=const*(j-1)+1}
foreach::foreach(x=list(1:5, "a"))  %dopar%  print(x)
foreach::foreach(x=list(1:5, "a"))  foreach::%dopar%  print(x)
document()
devtools::document()
document()
?solveols()
devtools::document()
devtools::document()
?solveols()
package_version(doParallel)
package_version("doParallel")
library(ggplot2)
require(gridExtra)
require(doParallel)
library(optR)
library(Rlinsolve)
library(MASS)
library(glmnet)
require(doParallel)
library(parallel)
package_version("doParallel")
package_version(doParallel)
package_version("glmnet)
""
)
))
}")
package_version("glmnet")
packageversion("glmnet")
package.version("glmnet")
package_version("glmnet")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
MASS::mvrnorm(n=1, mu=mu, Sigma=Sigma)
mu <- rep(0,20);Sigma <- diag(rep(1,20))
MASS::mvrnorm(n=1, mu=mu, Sigma=Sigma)
devtools::document()
devtools::document()
?elasticnet
devtools::document()
?elasticnet
devtools::document()
?elasticnet
install_github("JiayinLi-3724/STSCI6520")
library(devtools)
install_github("JiayinLi-3724/STSCI6520")
alpha3=3
n <- 100
A3 <- diag(alpha3, n)
A3[abs(row(A3) - col(A3)) == 1] <- -1
v=rep(c(1,0),n/2)
solveols("GaussSeidel",A=A3,v=v,iter=10)
library(HW2)
solveols("GaussSeidel",A=A3,v=v,iter=10)
n=500
X=rt(n, 6)
eps=rnorm(n,0,1)
Y=-1*X+eps
beta_ols=lm(Y ~ 0 + X )$coefficients
algoleverage("unif",X,Y,n,r=10,replication=500,beta_ols=beta_ols)
p=20
n=20
mu <- rep(0,20)
Sigma <- diag(rep(1,20))Sigma[1,2]=0.8
Sigma <- diag(rep(1,20))
Sigma[1,2]=0.8
Sigma[2,1]=0.8
Sigma[5,6]=0.8
Sigma[6,5]=0.8
X=matrix(NA,n,p)
set.seed(65206520)
for (i in 1:n){X[i,]=MASS::mvrnorm(n=1, mu=mu, Sigma=Sigma)}
beta=c(2,0,-2,0,1,0,-1,0,rep(0,12))
set.seed(65206520)
eps=rnorm(n,0,1)
Y=X%*%beta+eps
elasticnet(X,Y,alpha=0,n,p,nlambda=100,tol=1e-5)
